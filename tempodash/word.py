__all__ = ['from_antype']
import glob
import time
# from docx.enum.section import WD_ORIENT
# from docx.enum.style import WD_STYLE

intro = [
    (
        'This report has plots organized by analysis region for {antype}.',
        None, None
    ),
    (
        'The first plot has two panels. The left panel shows the analysis'
        + ' region (dashed rectangle) and the location of {antype}/TEMPO'
        + ' intersections (red pluses). The right panel is a scatter plot'
        + ' showing the overall correlation (Pearson-R) between {antype} and'
        + ' TEMPO and two best fit lines.',
        'List Bullet', None
    ),
    (
        'The first fit line (dashed black line) is a simple Linear Regression'
        + ' (LR) using least-squares optimization.',
        'List Bullet', None
    ),
    (
        'The second fit line (dotted black line) is a Orthogonal Deming'
        + ' Regression (ODR). The second line more appropriately attributes'
        + ' measurement uncertainty to both instruments.',
        'List Bullet', None
    ),
    (
        'The second plot is a time-series showing the pixel values at each'
        + ' time. Blue values are the {antype} measurement and red pluses (+)'
        + ' are the TEMPO value. These plots can have time gaps where no'
        + ' intersections occur (e.g., clouds).',
        'List Bullet', None
    ),
    (
        'The third plot shows diurnal variation over the whole time period.',
        'List Bullet', 'airnow'
    ),
    (
        'The third plot shows diurnal variation over the whole time period.',
        'List Bullet', 'pandora'
    ),
    (
        'Spatial pairing is done via TEMPO pixel overlap. Each overlap is'
        + ' considered a separate intersection and added to the pool for'
        + ' comparison.', None, None
    ),
    (
        'For Pandora, this will always be one per monitor/time.', None,
        'pandora'
    ),
    ('For Pandora, this will always be one per monitor/time.', None, 'airnow'),
    (
        'For TropOMI, this may be several interesections since their'
        + ' geometries are each a polygons.',
        None, 'tropomi'
    ),
    (
        'AirNow temporal pairing is done using samples taken in the same'
        + ' hour.', 'List Bullet', 'airnow'
    ),
    (
        'TropOMI temporal pairing is done using samples taken in the same'
        + ' hour.', 'List Bullet', 'tropomi'
    ),
    (
        'Pandora temporal pairing is within the smae hour and 900s',
        'List Bullet', 'pandora'
    ),
    (
        'Use the Headings to navigate directly to a specific region.',
        None, None
    ),
]


def new_doc(antype):
    from docx import Document
    from docx.shared import Inches

    datestr = time.strftime('%Y-%m-%dT%H%z')
    doc = Document()
    sec = doc.sections[-1]
    # new_width, new_height = sec.page_height, sec.page_width
    # sec.orientation = WD_ORIENT.LANDSCAPE
    # sec.page_width = new_width
    # sec.page_height = new_height
    sec.left_margin = Inches(0.5)
    sec.right_margin = Inches(0.5)
    sec.top_margin = Inches(0.5)
    sec.bottom_margin = Inches(0.5)
    antype = {
        'airnow': 'AirNow', 'tropomi': 'TropOMI', 'pandora': 'Pandora'
    }.get(antype, antype)
    title = f'{antype} vs TEMPO'
    author = 'Barron H. Henderson (US EPA)'
    doc.add_heading(title, 0)
    ap = doc.add_paragraph
    ap(f'generated by: {author}', 'List Paragraph')
    ap(f'last updated: {datestr}', 'List Paragraph')
    doc.add_heading('Report Overview', 1)
    for txt, sty, typchk in intro:
        if typchk is None or typchk == antype:
            doc.add_paragraph(txt.format(antype=antype), style=sty)

    doc.core_properties.title = title
    doc.core_properties.author = author
    doc.core_properties.keywords = f'TEMPO; {antype}'
    return doc


def figsort(path):
    suffix = path.split('_')[-1]
    sord = {'scat': 0, 'ts': 1, 'ss': 3, 'ds': 2}.get(suffix[:-4], 3)
    return path[:-len(suffix)], sord


def from_antype(antype, spc):
    import os
    from docx.shared import Inches
    from .cfg import configs as cfgs
    doc = new_doc(antype)
    sec = doc.sections[-1]
    w = (sec.page_width - sec.left_margin - sec.right_margin) * 0.98
    # doc.save(f'{antype}.docx')
    # print(bhh)
    doc.add_page_break()

    paragraph = doc.add_paragraph()
    if antype.startswith('tropomi'):
        for qkey in ['all', 'v1', 'v2']:
            run = paragraph.add_run()
            run.add_picture(f'figs/{antype}_{spc}_{qkey}_summary_pandora.png', width=Inches(2.25))
        for qkey in ['all', 'v1', 'v2']:
            run = paragraph.add_run()
            run.add_picture(f'figs/{antype}_{spc}_{qkey}_summary_ozone.png', width=Inches(2.25))
    else:
        for qkey in ['all', 'v1', 'v2']:
            run = paragraph.add_run()
            run.add_picture(f'figs/{antype}_{spc}_{qkey}_summary.png', width=Inches(2.25))
    for qkey in ['all', 'v1', 'v2']:
        run = paragraph.add_run()
        run.add_picture(f'figs/{antype}_{spc}_{qkey}_all_scat.png', width=Inches(2.25))
    if antype != 'airnow':
        for qkey in ['all', 'v1', 'v2']:
            doc.add_picture(f'figs/{antype}_{spc}_{qkey}_map.png', width=Inches(7.5))
    doc.add_page_break()
    anchktype = antype.replace('_offl', '').replace('_nrti', '')
    for lockey, cfg in cfgs.items():
        lockey = lockey.replace('Pandora', '')
        lockey = lockey.replace('Ozone_8-hr.2015.', '')
        if cfg.get(anchktype, False):
            doc.add_page_break()
            doc.add_heading(lockey, 1)
            paragraph = doc.add_paragraph()
            for qkey in ['all', 'v1', 'v2']:
                scatpath = f'figs/{antype}_{spc}_{qkey}_{lockey}_scat.png'
                if os.path.exists(scatpath):
                    run = paragraph.add_run()
                    run.add_picture(scatpath, width=Inches(2.25))

            for qkey in ['all', 'v1', 'v2']:
                dspath = f'figs/{antype}_{spc}_{qkey}_{lockey}_ds.png'
                if os.path.exists(dspath):
                    doc.add_picture(dspath, height=Inches(2.15))

    doc.save(f'docs/{antype}_{spc}.docx')


if __name__ == '__main__':
    import argparse

    prsr = argparse.ArgumentParser()
    prsr.add_argument('antype', nargs='*')
    args = prsr.parse_args()

    if len(args.antype) == 0:
        args.antype = ['airnow', 'pandora', 'tropomi']

    for antype in args.antype:
        print(f'{antype}...')
        from_antype(antype, 'no2')
        if antype != 'airnow':
            from_antype(antype, 'hcho')

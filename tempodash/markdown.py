__all__ = ['report']
import time
import os
from .config import locconfigs
import json

rptcfg = json.load(open('report_config.json', 'r'))
_intro = rptcfg['introduction']
bykeys = rptcfg['bykeys']
plotopts = rptcfg['plotopts']


class report:
    def __init__(self, xkey, ykey, meta=None):
        """
        Arguments
        ---------
        xkey : str
            tropomi_offl_no2_sum, tropomi_offl_no2_trop, pandora_no2_total,
            tropomi_offl_hcho_total, pandora_hcho_total, or airnow_no2_sfc
        ykey : str
            tempo_no2_sum, tempo_no2_trop, tempo_hcho_total
        meta : dict
            Must contain author and institution
        """
        self.xkey = xkey
        self.ykey = ykey
        if meta is None:
            meta = dict(author='unknown', institution='unknown')
            meta = rptcfg.get('meta', meta)
        self.meta = meta

        self.source = rptcfg['xkeysources'][xkey]
        self.spc = rptcfg['xkeylabels'][xkey]
        self.markdown = ''
        self.fignum = 0
        self.section = 0
        self.subsection = 0

    def add_figure(self, path, caption, width=.98):
        self.fignum += 1
        if self.subsection == 0:
            fn = f'{self.section}.{self.fignum}'
        else:
            fn = f'{self.section}.{self.subsection}.{self.fignum}'
        width = width * 100
        self.add_md(
            f'![{caption}](../{path} "{caption}"){{width="{width}%"}}',
            'Normal', end='\n'
        )
        self.add_md(f'<br/>*Figure {fn}: {caption}*', 'Caption')

    def add_md(self, txt, sty='Normal', end='\n\n'):
        pfx = {
            'Title': '# ',
            'Heading 1': '## ',
            'Heading 2': '### ',
            'Heading 3': '#### ',
            'Heading 4': '##### ',
            'List Bullet': '* ',
            'List Bullet 2': '    * ',
            'List Bullet 3': '        * ',
            'Normal': '',
            'Caption': '',
        }.get(sty)
        if sty == 'Heading 1':
            self.fignum = 0
            self.section += 1
            self.subsection = 0
            pfx = f'{pfx}{self.section}: '
        if sty == 'Heading 2':
            self.fignum = 0
            self.subsection += 1
            pfx = f'{pfx}{self.section}.{self.subsection}: '
        if sty == 'Heading 3':
            self.fignum = 0
            self.subsection += 1
            pfx = f'{pfx}{self.section}.{self.subsection}.?: '
        self.markdown += pfx + txt + end

    def save(self, outpath):
        with open(outpath, 'w') as outf:
            outf.write(self.markdown)

    def init_md(self):
        """
        Create the basic introductory material of the report.

        Arguments
        ---------
        section : int
            Number to use for section

        Returns
        -------
        None
        """

        datestr = time.strftime('%Y-%m-%dT%H%z')
        source = self.source
        spc = self.spc
        add = self.add_md
        add("""---
title:  'TEMPO Validation Appendices'
subtitle: "{source} vs TEMPO {spc}"
author:
- {author} ({institution})
maxwidth: 80%
...
""".format(**self.meta, source=source, spc=spc))
        add(f'{source} vs TEMPO {spc}', 'Title',)
        add('    generated by: {author}'.format(**self.meta), end='\n')
        add('    institution: {institution}'.format(**self.meta), end='\n')
        add(f'    last updated: {datestr}')
        add('Report Description', 'Heading 1')
        for txt, sty, typchk in _intro:
            if typchk is None or self.xkey in typchk:
                add(txt.format(source=source, spc=spc), sty)

    def add_loc(self, lockey, label, desc=None):
        """
        For a lockey and label, create a section using all figures in
        report_config.json bykeys and plotopts

        Arguments
        ---------
        lockey : str
        label : str
        section : int
        desc : str

        Returns
        -------
        figpaths : list
            List of added figure paths
        """
        import glob
        add = self.add_md
        xkey = self.xkey
        ykey = self.ykey
        prefix = f'figs/{lockey}/{ykey}_vs_{xkey}'
        allfigpaths = glob.glob(prefix + '*.png')
        addedfigpaths = []
        if len(allfigpaths) == 0:
            print('\nWARN::\nWARN:: no figs for', xkey, ykey, lockey)
            return

        add(f'{label}', 'Heading 1')
        if desc is None:
            desc = locconfigs[lockey]['description']
        add(f'This section shows plots for {desc}')
        for bykey in bykeys:
            found = False
            for plotopt in plotopts:
                plotkey = plotopt['plottype']
                figwidth = plotopt['width']
                cap = plotopt['caption'].format(bykey=bykey[2:], label=label)
                figpath = f'{prefix}_{bykey}_{plotkey}.png'
                if os.path.exists(figpath):
                    if not found:
                        found = True
                        add(f'{label} by {bykey[2:]}', 'Heading 2')
                    if bykey == 'bytempo' and plotkey.startswith('stats_rioa'):
                        # msg = '\nWARN::\nWARN:: Skip R and IOA when grouped'
                        # msg += ' by tempo.'
                        # print(msg)
                        addedfigpaths.append(figpath)
                        continue
                    self.add_figure(figpath, cap, width=figwidth)
                    addedfigpaths.append(figpath)
        skipped = set(allfigpaths).difference(addedfigpaths)
        if len(skipped) > 0:
            print('\nWARN::\nWARN:: did not add:', skipped)

    def add_maps(self):
        """
        Arguments
        ---------
        section : int
            Number to use for section

        Returns
        -------
        None
        """
        self.add_md('Location Overview', 'Heading 1')
        ispandora = self.xkey.startswith('pandora')
        if ispandora:
            sctsum = f"Figure {self.section}.1 shows the PGN stations used"
            sctsum += 'for NO2. Comparisons include only pixels within 0.03'
            sctsum += ' degrees of each station.'
            if 'hcho' in self.xkey:
                sctsum += ' Only Pandora stations selected for high quality'
                sctsum += ' HCHO (solid markers) are included.'
        else:
            sctsum = f"Figures {self.section}.1 and {self.section}.2 show all"
            sctsum += ' the locations used within this report.'
            sctsum += ' Pandora stations analyses compare all valid pixels in'
            sctsum += ' a 0.2 degree bounding box around the instrument.'
            sctsum += ' Nonattainment Areas (NAA) analyses include valid'
            sctsum += ' pixels within the bounding box that contains the area.'
        self.add_md(sctsum)
        figwidth = 0.5
        figpath = 'figs/configmap_pandora.png'
        cap = 'All Pandora stations used for NO2 analysis are shown, but '
        cap += ' only stations with a solid marker are used for HCHO.'
        self.add_figure(figpath, cap, width=figwidth)
        if not ispandora:
            figpath = 'figs/configmap_naa.png'
            cap = 'Nonattainment Areas used in this analysis are represented'
            cap += ' by the bounding envelope that surrounds them.'
            self.add_figure(figpath, cap, width=figwidth)

    @classmethod
    def from_keys(cls, xkey, ykey, locs=None, meta=None):
        """
        Arguments
        ---------
        xkey : str
            tropomi_offl_no2_sum, tropomi_offl_no2_trop, pandora_no2_total,
            tropomi_offl_hcho_total, pandora_hcho_total, or airnow_no2_sfc
        ykey : str
            tempo_no2_sum, tempo_no2_trop, tempo_hcho_total
        locs : list
            Locations from within the config.json locations property
        meta : dict
            Must contain author and institution

        Returns
        -------
        rpt : report
            Report object preloaded.
        """
        if meta is None:
            meta = dict(author='Barron H. Henderson', institution='US EPA')
        if locs is None:
            locs = sorted([
                (cfg['label'], lockey) for lockey, cfg in locconfigs.items()
            ])
            locs = [_i[1] for _i in locs]
        rpt = cls(xkey, ykey, meta)
        rpt.init_md()
        rpt.add_maps()
        rpt.add_loc('summary', 'All Sites', 'all sites')
        for lockey in locs:
            loclbl = locconfigs[lockey]['label']
            print(loclbl, end='.', flush=True)
            rpt.add_loc(lockey, loclbl)

        print()
        return rpt


if __name__ == '__main__':
    import argparse
    import tempodash.util
    prsr = argparse.ArgumentParser()
    prsr.add_argument('--xykeys', action='append', default=[])
    args = prsr.parse_args()
    if len(args.xykeys) == 0:
        args.xykeys.extend([
            'pandora_no2_total,tempo_no2_sum',
            'tropomi_offl_no2_sum,tempo_no2_sum',
            'tropomi_offl_no2_trop,tempo_no2_trop',
            'pandora_hcho_total,tempo_hcho_total',
            'tropomi_offl_hcho_total,tempo_hcho_total',
        ])
    for xykeys in args.xykeys:
        xkey, ykey = xykeys.split(',')
        outpath = f'markdown/{xkey}_vs_{ykey}.md'
        summarypath = f'markdown/{xkey}_vs_{ykey}_summary.md'
        # Quick check if this needs to be done
        # if any csv is older than any store; remake
        spc = ykey.split('_')[1]
        src = xkey.split('_' + spc)[0]
        remake = tempodash.util.depends(
            f'markdown/{xkey}_vs_{ykey}*.md',
            f'figs/*/{ykey}_vs_{xkey}*.png', 1
        )
        remake = remake or tempodash.util.depends(
            f'markdown/{xkey}_vs_{ykey}*.md',
            ['config.json', 'report_config.json', 'scripts/markdown.py'], 1
        )
        if not remake:
            continue

        os.makedirs(os.path.dirname(outpath), exist_ok=True)
        os.makedirs(os.path.dirname(summarypath), exist_ok=True)
        rpt = report.from_keys(xkey, ykey, locs=[])
        rpt.save(summarypath)
        locs = None
        rpt = report.from_keys(xkey, ykey, locs=locs)
        rpt.save(outpath)
